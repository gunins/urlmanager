{"version":3,"sources":["../../../es6/dev/router/utils.js"],"names":["root","factory","define","amd","exports","module","parseParams","value","decodeURIComponent","replace","err","iterateQueryString","queryString","callback","keyValues","split","forEach","keyValue","arr","shift","join","setQuery","parts","query","name","push","serialize","obj","str","p","hasOwnProperty","encodeURIComponent","getLocation","params","pattern","getQuery","fragment","isQuery","current","substring","length","newQuery","equals","arr1","arr2","i","l","Array","STRIP_COMMENTS","ARGUMENT_NAMES","getArgs","func","oneOf","patterns","string","pos","map","indexOf","filter","index","fnStr","toString","first","last","argsList","slice","trim","result","match","item"],"mappings":"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","file":"utils.js","sourcesContent":["/*globals define*/\n(function(root, factory) {\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    }\n}(this, function() {\n    'use strict';\n\n    function parseParams(value) {\n        try {\n            return decodeURIComponent(value.replace(/\\+/g, ' '));\n        }\n        catch (err) {\n            // Failover to whatever was passed if we get junk data\n            return value;\n        }\n    }\n\n    function iterateQueryString(queryString, callback) {\n        let keyValues = queryString.split('&');\n        keyValues.forEach((keyValue) => {\n            let arr = keyValue.split('=');\n            callback(arr.shift(), arr.join('='));\n        });\n    }\n\n    function setQuery(parts) {\n        let query = {};\n        if (parts) {\n            iterateQueryString(parts, (name, value) => {\n                value = parseParams(value);\n                if (!query[name]) {\n                    query[name] = value;\n                }\n                else if (typeof query[name] === 'string') {\n                    query[name] = [query[name], value];\n                }\n                else {\n                    query[name].push(value);\n                }\n            });\n        }\n        return query;\n    }\n\n    function serialize(obj) {\n        let str = [];\n        for (let p in obj)\n            if (obj.hasOwnProperty(p)) {\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n            }\n        return str.join(\"&\");\n    };\n\n    function getLocation(params, pattern) {\n\n        return {\n            getQuery() {\n                return params.query;\n            },\n            getLocation(fragment = '', isQuery) {\n                let current = params.root.substring(0, params.root.length - pattern.length),\n                    newQuery;\n\n                if (isQuery === true) {\n                    newQuery = serialize(params.query);\n                }\n                else if (isQuery === false) {\n                    newQuery = '';\n                }\n                else {\n                    newQuery = serialize(isQuery);\n                }\n                return current + fragment + (newQuery.length === 0 ? '' : '?' + newQuery);\n            }\n        }\n    };\n\n    // attach the .equals method to Array's prototype to call it on any array\n    function equals(arr1, arr2) {\n        // if the other arr2 is a falsy value, return\n        if (!arr2)\n            return false;\n        // compare lengths - can save a lot of time\n        if (arr1.length !== arr2.length)\n            return false;\n\n        for (let i = 0, l = arr1.length; i < l; i++) {\n            // Check if we have nested arrays\n            if (arr1[i] instanceof Array && arr2[i] instanceof Array) {\n                // recurse into the nested arrays\n                if (!equals(arr1[i], arr2[i]))\n                    return false;\n            }\n            else if (arr1[i] !== arr2[i]) {\n                // Warning - two different object instances will never be equal: {x:20} != {x:20}\n                return false;\n            }\n        }\n        return true;\n    };\n    const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg,\n        ARGUMENT_NAMES = /(?:^|,)\\s*([^\\s,=]+)/g;\n\n    function getArgs(func) {\n        let oneOf = (...patterns) => (string, pos) => patterns\n                .map(pattern => string.indexOf(pattern))\n                .filter(index => index === pos).length > 0,\n            fnStr = func.toString().replace(STRIP_COMMENTS, ''),\n            first = oneOf('(', 'function (', 'function(')(fnStr, 0) ? fnStr.indexOf('(') + 1 : 0,\n            last = !oneOf('=>')(fnStr, -1) ? fnStr.indexOf('=>') : fnStr.indexOf(')'),\n            argsList = fnStr.slice(first, last).trim(),\n            result = argsList.match(ARGUMENT_NAMES);\n        return (result === null) ? [] : result.map(item => item.replace(/[\\s,]/g, ''));\n    }\n\n    return {\n        serialize, getLocation, equals, setQuery, getArgs\n    }\n\n}));"]}